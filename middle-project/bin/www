#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("myapp:server");
var http = require("http");
var customerRepo = require("./../repos/customerRepo");
var statusdriver = require("./../public/constants/statusdriver");
var driverRepo = require("./../repos/driverRepo");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Socket.io
 */
var io = require("socket.io").listen(server, { log: true });

var res_req = null;
var mapData = [];
io.of("/driver").on("connect", socket => {
  socket.on("driver-connected", function(iddriver) {
    console.log(socket.id + " driver connected " + iddriver);
    driverRepo.update_socketid(iddriver, socket.id);
    driverRepo.update_status(iddriver, statusdriver.available);
  });

  socket.on("response-driver", function(data) {
    console.log("data: ", data);
    if (data === "cancel") {
      res_req = false;
    } else if (data.mess === "ok") {
      mapData.push(data.data);
      console.log("map data: ", mapData);
      res_req = true;
    }
  });
  socket.on("update-customer-table", data => {
    console.log("update customer table");
    customerRepo
      .loadAll()
      .then(rows => {
        socket.broadcast.emit("server-send-data", { data: rows });
        return rows;
      })
      .catch(err => {
        console.log(err);
        res.statusCode = 500;
        res.end("View error log on console");
      });
  });
});

io.of("/admin").on("connect", socket => {
  socket.on("get-map-to-customer", function(idcustomer) {
    console.log("get map for customer: ", idcustomer);
    if (mapData.length > 0) {
      mapData.forEach((element, index) => {
        // console.log(element);
        if (idcustomer == element.customer) {
          socket.broadcast.emit("server-send-map-to-driver", element);
        }
      });
    }
  });

  socket.on("update-customer-table", data => {
    console.log("update customer table");
    customerRepo
      .loadAll()
      .then(rows => {
        socket.broadcast.emit("server-send-data", { data: rows });
        return rows;
      })
      .catch(err => {
        console.log(err);
        res.statusCode = 500;
        res.end("View error log on console");
      });
  });
});

io.sockets.on("connection", function(socket) {
  var sendRequest = (curdata, data) => {
    driverRepo
      .get_socketid(curdata.id) // get id socket of driver i
      .then(rows => {
        // nếu có địa chỉ socket tức đang online thì gửi request
        console.log("server got id socket driver: ", rows[0].socketid);

        // gui toi tung tai xe cho den khi nao nhan dk

        var dataSend = {
          driver: curdata,
          // driverid: driverid,
          customer: data.idcustomer,
          customername: data.idName,
          postionCustomer: data.postionCustomer
        };
        // var curSocket = rows[0].socketid;
        // console.log(rows[0].socketid);
        toClient = io.of("/driver");
        toClient.emit("request-car", dataSend);

        var seconds = 11;
        var x = setInterval(function() {
          seconds = seconds - 1;
          console.log(seconds);
          if (res_req == false) {
            console.log("driver cancel");
            driverRepo
              .loadCountAvaiable()
              .then(rows => {
                console.log("======= number driver available =======");
                console.log(rows);
                if (rows.length > 0) {
                  var a = rows[0];
                  console.log("number driver available now: ", a.cnt);
                }
                if (a.cnt == 0) {
                  console.log(" k co tai xe!");
                  socket.broadcast.emit("cancel", { dataSend });
                }
              })
              .catch(err => {
                res.end("fail");
              });
            res_req = null;
            clearInterval(x);
            // continue;
          } else if (res_req == true) {
            console.log("gotten driver");
            customerRepo
              .loadAll()
              .then(rows => {
                socket.broadcast.emit("server-send-data", { data: rows });
                return rows;
              })
              .catch(err => {
                console.log(err);
                res.statusCode = 500;
                res.end("View error log on console");
              });

            clearInterval(x);
          }
          if (seconds == 0) {
            clearInterval(x);
          }
        }, 1000);
      })
      .catch(err => {
        console.log(err);
      });
  };

  customerRepo
    .loadAll()
    .then(rows => {
      socket.emit("server-send-data", { data: rows });
      return rows;
    })
    .catch(err => {
      console.log(err);
      res.statusCode = 500;
      res.end("View error log on console");
    });

  socket.on("client-reload-data", function(data) {
    console.log("server received client reload data: ", data);
    socket.broadcast.emit("server-send-data", data);
  });

  //server received request book bike with infor list driver and id customer
  socket.on("client-getdriver-data", function(data) {
    console.log("server received client getdriver data: ", data);
    // xu ly send toi tung diver so luong gioi han la 3 ( test)
    var limit = data.listdriver.length > 3 ? 3 : data.listdriver.length;
    console.log("limit: " + limit);
    if (limit == 0) {
      socket.broadcast.emit("abc", data);
    } else {
      for (i = 0; i < limit; i++) {
        if (data.listdriver[i].status === statusdriver.available) {
          console.log("driver " + i + " " + data.listdriver[i].id); // status of driver
          sendRequest(data.listdriver[i], data);
        }
        if (res_req == true) {
          res_req = null;
          break;
        }
      }
    }
  });

  socket.on("client-send-data", function(data) {
    console.log("server received: ", JSON.stringify(data), " from ", socket.id);
  });

  // This handles when a user is disconnected
  socket.on("disconnect", function(o) {
    driverRepo
      .getbysocketId(socket.id)
      .then(rows => {
        if (rows.length > 0) {
          driverRepo.update_status(rows[0].id, statusdriver.disable);
        }
      })
      .catch(err => {
        alert(err);
      });
    // find the user in the array
    // var index = users.indexOf(socket.id);
    // if (index != -1) {
    //   // Eliminates the user from the array
    //   users.splice(index, 1);
    // }

    console.log(socket.id, " disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
