#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("myapp:server");
var http = require("http");
var customerRepo = require("./../repos/customerRepo");
var statusdriver = require("./../public/constants/statusdriver");
var driverRepo = require("./../repos/driverRepo");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Socket.io
 */
var io = require("socket.io").listen(server, { log: true });

io.of("/driver").on("connect", socket => {
  socket.on("driver-connected", function(data) {
    console.log(socket.id + " driver connected " + data);
    driverRepo.update_socketid(data, socket.id);
  });
});

io.sockets.on("connection", function(socket) {
  customerRepo
    .loadAll()
    .then(rows => {
      socket.emit("server-send-data", { data: rows });
      return rows;
    })
    .catch(err => {
      console.log(err);
      res.statusCode = 500;
      res.end("View error log on console");
    });

  socket.on("client-reload-data", function(data) {
    console.log("server received client reload data: ", data);
    socket.broadcast.emit("server-send-data", data);
  });

  //server received request book bike with infor list driver and id customer
  socket.on("client-getdriver-data", function(data) {
    console.log("server received client getdriver data: ", data);
    // xu ly send toi tung diver so luong gioi han la 3 ( test)
    var limit = data.listdriver.length > 3 ? 3 : data.listdriver.length;
    for (i = 0; i < limit; i++) {
      console.log("driver " + i + " " + data.listdriver[i].status); // status of driver
      if (data.listdriver[i].status === statusdriver.available) {
        // if driver is available
        var curdata = data.listdriver[i];
        driverRepo
          .get_socketid(data.listdriver[i].id) // get id socket of driver i
          .then(rows => {
            // nếu có địa chỉ socket tức đang online thì gửi request
            console.log("server got id socket driver: ", rows[0].socketid);

            // gui toi tung tai xe cho den khi nao nhan dk

            var dataSend = {
              driver: curdata,
              customer: data.idcustomer,
              customername: data.idName,
              postionCustomer: data.postionCustomer
            };
            var curSocket = rows[0].socketid;
            console.log(rows[0].socketid);
            toClient = io.of("/driver");
            toClient.emit("request-car", dataSend);

            // io.of("/admin").on("connect", socket => {
            //   socket
            //     .to(rows[0].socketid)
            //     .emit("request-car", "nguyen dang quang request grab");
            //   //socket.emit("server-send-book-grap", { data: rows });
            // });
          })
          .catch(err => {
            console.log(err);
          });
      }
    }
  });

  socket.on("client-send-data", function(data) {
    console.log("server received: ", JSON.stringify(data), " from ", socket.id);
  });

  /*// This is a listener to the signal "something"
   stream.on("start stream", function (data) {
   console.log("Test: ", data);
   socket.emit('info', { data: data });
   });*/

  // This handles when a user is disconnected
  socket.on("disconnect", function(o) {
    // find the user in the array
    // var index = users.indexOf(socket.id);
    // if (index != -1) {
    //   // Eliminates the user from the array
    //   users.splice(index, 1);
    // }

    console.log(socket.id, " disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
