{{!-- <h1>{{title}}</h1> --}}
{{!-- <p>Welcome to {{title}}</p> --}}
{{!-- <h3>Xây Dựng Hệ Thống Đặt xe máy qua thông tin khách hàng nhập vào</h3> --}}
<script>

    var datatable = null;
    var socket = io("http://localhost:3000");

    socket.on('server-send-data', function (data) {
        console.log("client received: ", data);
        value = data.data;
        $('#list').empty();
        var html = []
        for (var key in value) {
            html += '<tr><td class="text-center">' + value[key].id + '</td><td>' + value[key].name + '</td><td>' + value[key].address + '</td><td>' + value[key].phone + '</td>'
                + '<td>' + value[key].notes + '</td>'
                + '<td>' + value[key].status1 + '</td>'
                + '<td>' + value[key].date + '</td>'
                + '<td class="td-actions text-center">'
                + ' <button value="' + value[key].id + '" onClick="defaultClick(' + value[key].id + ')"  type="button" class="btn btn-success btn-round getdemo"> Xem'
                + '</button ></td ><td><button value="' + value[key].id + '" onClick="requestDriver(' + value[key].id + ')"  type="button" class="btn btn-danger btn-round getdemo"> Đặt xe'
                + '</button ></td ><td><button value="' + value[key].id + '" onClick="getMapToCustomer(' + value[key].id + ')"  type="button" class="btn btn-danger btn-round getdemo"> Xem bản đồ'
                + '</button ></td >';
        }
        $('#list').append(html);
    });

    socket.on('server-send-reload-data', function (data) {
        console.log("========================");
        console.log("reload data received from server: ", data);
    });

    socket.on('abc', function (data) {
        console.log("============================================================");
        alert("Không có tài xế cho khách hàng: " + data.idName);
    });

    var mapDriver = io("http://localhost:3000/admin")
    mapDriver.on("server-send-map-to-driver", data => {
        console.log("bat dau ve ban do", data);

        if ($('#google-map-api').css('display') == 'none' || $('#google-map-api').css("visibility") == "hidden") {
            $("#google-map-api-driver").empty();
        } else {
            document.getElementById("google-map-api").style.display = "none";
            document.getElementById("google-map-api-driver").style.display = "block";
        }


        function calculateRouteFromAtoB(platform) {
            var router = platform.getRoutingService(),
                routeRequestParams = {
                    mode: 'fastest;car',
                    representation: 'display',
                    routeattributes: 'waypoints,summary,shape,legs',
                    maneuverattributes: 'direction,action',
                    waypoint0: data.driver.coords.lat + ',' + data.driver.coords.lng,// '52.5160,13.3779', // Brandenburg Gate
                    waypoint1: data.postionCustomer.lat + ',' + data.postionCustomer.lng//'52.5206,13.3862'  // Friedrichstraße Railway Station
                };

            router.calculateRoute(
                routeRequestParams,
                onSuccess,
                onError
            );
        }
        function onSuccess(result) {
            var route = result.response.route[0];
            addRouteShapeToMap(route);
            addManueversToMap(route);

            addWaypointsToPanel(route.waypoint);
            addManueversToPanel(route);
            addSummaryToPanel(route.summary);
            // ... etc.
        }
        function onError(error) {
            alert('Ooops!');
        }

        // set up containers for the map  + panel
        var mapContainer = document.getElementById('google-map-api-driver'),
            routeInstructionsContainer = document.getElementById('modal-panel2');
        //Step 1: initialize communication with the platform
        var platform = new H.service.Platform({
            app_id: 'devportal-demo-20180625',
            app_code: '9v2BkviRwi9Ot26kp2IysQ',
            useHTTPS: true
        });
        var pixelRatio = window.devicePixelRatio || 1;
        var defaultLayers = platform.createDefaultLayers({
            tileSize: pixelRatio === 1 ? 256 : 512,
            ppi: pixelRatio === 1 ? undefined : 320
        });

        //Step 2: initialize a map - this map is centered over Berlin
        var map = new H.Map(mapContainer,
            defaultLayers.normal.map, {
                center: { lat: 52.5160, lng: 13.3779 },
                zoom: 13,
                pixelRatio: pixelRatio
            });

        //Step 3: make the map interactive
        // MapEvents enables the event system
        // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
        var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

        // Create the default UI components
        var ui = H.ui.UI.createDefault(map, defaultLayers);

        // Hold a reference to any infobubble opened
        var bubble;

        /**
         * Opens/Closes a infobubble
         * @param  {H.geo.Point} position     The location on the map.
         * @param  {String} text              The contents of the infobubble.
         */
        function openBubble(position, text) {
            if (!bubble) {
                bubble = new H.ui.InfoBubble(
                    position,
                    // The FO property holds the province name.
                    { content: text });
                ui.addBubble(bubble);
            } else {
                bubble.setPosition(position);
                bubble.setContent(text);
                bubble.open();
            }
        }
        /**
         * Creates a H.map.Polyline from the shape of the route and adds it to the map.
         * @param {Object} route A route as received from the H.service.RoutingService
         */
        function addRouteShapeToMap(route) {
            var lineString = new H.geo.LineString(),
                routeShape = route.shape,
                polyline;

            routeShape.forEach(function (point) {
                var parts = point.split(',');
                lineString.pushLatLngAlt(parts[0], parts[1]);
            });

            polyline = new H.map.Polyline(lineString, {
                style: {
                    lineWidth: 4,
                    strokeColor: 'rgba(0, 128, 255, 0.7)'
                }
            });
            // Add the polyline to the map
            map.addObject(polyline);
            // And zoom to its bounding rectangle
            map.setViewBounds(polyline.getBounds(), true);
        }


        /**
         * Creates a series of H.map.Marker points from the route and adds them to the map.
         * @param {Object} route  A route as received from the H.service.RoutingService
         */
        function addManueversToMap(route) {
            var svgMarkup = '<svg width="18" height="18" ' +
                'xmlns="http://www.w3.org/2000/svg">' +
                '<circle cx="8" cy="8" r="8" ' +
                'fill="#1b468d" stroke="white" stroke-width="1"  />' +
                '</svg>',
                dotIcon = new H.map.Icon(svgMarkup, { anchor: { x: 8, y: 8 } }),
                group = new H.map.Group(),
                i,
                j;

            // Add a marker for each maneuver
            for (i = 0; i < route.leg.length; i += 1) {
                for (j = 0; j < route.leg[i].maneuver.length; j += 1) {
                    // Get the next maneuver.
                    maneuver = route.leg[i].maneuver[j];
                    // Add a marker to the maneuvers group
                    var marker = new H.map.Marker({
                        lat: maneuver.position.latitude,
                        lng: maneuver.position.longitude
                    },
                        { icon: dotIcon });
                    marker.instruction = maneuver.instruction;
                    group.addObject(marker);
                }
            }

            group.addEventListener('tap', function (evt) {
                map.setCenter(evt.target.getPosition());
                openBubble(
                    evt.target.getPosition(), evt.target.instruction);
            }, false);

            // Add the maneuvers group to the map
            map.addObject(group);
        }


        /**
         * Creates a series of H.map.Marker points from the route and adds them to the map.
         * @param {Object} route  A route as received from the H.service.RoutingService
         */
        function addWaypointsToPanel(waypoints) {

            var nodeH3 = document.createElement('h3'),
                waypointLabels = [],
                i;

            for (i = 0; i < waypoints.length; i += 1) {
                waypointLabels.push(waypoints[i].label)
            }

            nodeH3.textContent = waypointLabels.join(' - ');

            routeInstructionsContainer.innerHTML = '';
            routeInstructionsContainer.appendChild(nodeH3);
        }

        /**
         * Creates a series of H.map.Marker points from the route and adds them to the map.
         * @param {Object} route  A route as received from the H.service.RoutingService
         */
        function addSummaryToPanel(summary) {
            var summaryDiv = document.createElement('div'),
                content = '';
            content += '<b>Total distance</b>: ' + summary.distance + 'm. <br/>';
            content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


            summaryDiv.style.fontSize = 'small';
            summaryDiv.style.marginLeft = '5%';
            summaryDiv.style.marginRight = '5%';
            summaryDiv.innerHTML = content;
            routeInstructionsContainer.appendChild(summaryDiv);
        }

        /**
         * Creates a series of H.map.Marker points from the route and adds them to the map.
         * @param {Object} route  A route as received from the H.service.RoutingService
         */
        function addManueversToPanel(route) {

            var nodeOL = document.createElement('ol'),
                i,
                j;

            nodeOL.style.fontSize = 'small';
            nodeOL.style.marginLeft = '5%';
            nodeOL.style.marginRight = '5%';
            nodeOL.className = 'directions';

            // Add a marker for each maneuver
            for (i = 0; i < route.leg.length; i += 1) {
                for (j = 0; j < route.leg[i].maneuver.length; j += 1) {
                    // Get the next maneuver.
                    maneuver = route.leg[i].maneuver[j];

                    var li = document.createElement('li'),
                        spanArrow = document.createElement('span'),
                        spanInstruction = document.createElement('span');

                    spanArrow.className = 'arrow ' + maneuver.action;
                    spanInstruction.innerHTML = maneuver.instruction;
                    li.appendChild(spanArrow);
                    li.appendChild(spanInstruction);

                    nodeOL.appendChild(li);
                }
            }

            routeInstructionsContainer.appendChild(nodeOL);
        }


        Number.prototype.toMMSS = function () {
            return Math.floor(this / 60) + ' minutes ' + (this % 60) + ' seconds.';
        }

        // Now use the map as required...

        calculateRouteFromAtoB(platform);


    });

</script>
<!-- Navigation -->
<nav class="navbar navbar-expand-lg navbar-default fixed-top" id="mainNav">
    <div class="container">
        <a class="navbar-brand js-scroll-trigger" href="#page-top">
            <img class="rounded-circle img-fluid" style="width:45px; height:45px; display: inline-block;" src="img/logos/logo.png"
                alt="">GRAP BIKE
        </a>
        <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive"
            aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
            Menu
            <i class="fas fa-bars"></i>
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav text-uppercase ml-auto">
                <li class="nav-item">
                    <a class="nav-link js-scroll-trigger" href="/admin/addadmin">Thêm Tài Khoản</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link js-scroll-trigger" href="/admin/logout">Đăng Xuất</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<!-- Header -->
<header class="masthead">
    <div class="container">
        <div class="intro-text">
        </div>
    </div>
</header>

<br />
<div class="row">
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h3 class="panel-title">Nhập thông tin vị trí: </h3>
            </div>
            <div class="panel-body" style="height:470px;">
                <form id="formInfo">
                    <div class="">
                        <div class="form-group ">
                            Ho Ten:
                            <input onkeypress="onKeypress()" type="text" class="form-control" id="username" placeholder="Ho Ten">
                        </div>&#160;&#160;
                        <div class="form-group ">
                            So Dien Thoai:
                            <input onkeypress="onKeypress()" type="text" class="form-control" id="phonenumber"
                                placeholder="So dien thoai">
                        </div>
                    </div>
                    <br />
                    <div class="form-group ">
                        Dia chi don khach:
                        <input onkeypress="onKeypress()" onchange="onChange()" type="text" class="form-control" id="address"
                            placeholder="Dia chi">
                        {{!-- <p class="help-block">Example block-level help text here.</p> --}}
                    </div>
                    <div class="form-group ">
                        Ghi chú:
                        <textarea onkeypress="onKeypress()" class="form-control" cols="4" rows="2" id="note"
                            placeholder="ghi chu."></textarea>
                    </div>
                    <button type="submit" class="btn btn-info text-center">Submit</button>
                </form>
            </div>
        </div>
    </div>

    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        <div id="google-map-api" style="width: 100%; height: 510px; background: grey" class="text-center">
        </div>
        <div id="google-map-api-driver" style="width: 100%; height: 510px; background: grey; display: none;" class="text-center">
        </div>
        <div id="modal-panel" style="width: 100%;display: none; "></div>
        <div id="modal-panel2" style="width: 100%;display: none; "></div>

    </div>
</div>


<br />
<br />
<div class="container">
    <div class="title">
        {{!-- <h3>Danh sách thông tin khách hàng</h3> --}}
    </div>
    <div class="row">
        <div class="col-md-12">
        </div>

        {{!--
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
            crossorigin="anonymous"></script> --}}
        <script src="https://unpkg.com/popper.js@1.12.6/dist/umd/popper.js" integrity="sha384-fA23ZRQ3G/J53mElWqVJEGJzU0sTs+SvzG8fXVWP+kJQ1lwFAOkcUOysnlKJC33U"
            crossorigin="anonymous"></script>
        <script src="https://unpkg.com/bootstrap-material-design@4.1.1/dist/js/bootstrap-material-design.js" integrity="sha384-CauSuKpEqAFajSpkdjv3z9t8E7RlpJ1UP0lKM/+NdtSarroVKu069AlsRPKkFBz9"
            crossorigin="anonymous"></script>

        <hr />
        <h2>Danh sách thông tin khách hàng</h2>
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center">ID</th>
                        <th>Tên</th>
                        <th>Địa chỉ</th>
                        <th>Số điện thoại</th>
                        <th>Ghi chú</th>
                        <th>Tình trạng</th>
                        <th>Ngày tạo</th>
                        <th class="text-center">Xem vị trí
                            <button type="button" rel="tooltip" class="btn btn-success btn-round btn-just-icon btn-sm"
                                data-original-title="" title="">
                                <i class="material-icons">place</i>
                            </button>
                        </th>
                    </tr>
                </thead>

                <tbody id="list">

                </tbody>
            </table>
        </div>

        <script type="text/javascript" src="/javascripts/getInfo.js"></script>